,PlanRating=`C26: Rating of Health Plan`
,GetCare=`C22: Getting Needed Care`
,DEye=`C13: Diabetes Care - Eye Exam`
,DKid=`C14: Diabetes Care - Kidney Disease Monitoring`
,DSugar=`C15: Diabetes Care - Blood Sugar Controlled`
,DMed=`D11: Medication Adherence for Diabetes Medications`
)%>%
select(contract, tot_enr, `Organization Type`,`Parent Organization`,`Contract Effective Date`
,BCS
,CCS
,Flu
,Phys
,MH
,Activity
,BMI
,Leave
,Quality
,PlanRating
,GetCare
,DEye
,DKid
,DSugar
,DMed)
a_dat1=final_data%>%
filter(`Organization Type`=="Local CCP" | `Organization Type`=="Regional CCP" | `Organization Type`=="1876 Cost")%>%
filter(Leave != "Plan too new to be measured" & Leave !="Not enough data available" & Leave !="Plan too small to be measured" )%>%
mutate(Leave=as.numeric(substr(Leave,1,nchar(Leave)-1)))
a_dat2=final_data%>%
filter(`Organization Type`=="Local CCP" | `Organization Type`=="Regional CCP" | `Organization Type`=="1876 Cost")%>%
filter(Quality != "Plan too new to be measured" & Quality !="Not enough data available" & Quality !="Plan too small to be measured" )%>%
mutate(Quality=as.numeric(Quality))
a_dat3=final_data%>%
filter(`Organization Type`=="Local CCP" | `Organization Type`=="Regional CCP" | `Organization Type`=="1876 Cost")%>%
filter(PlanRating != "Plan too new to be measured" & PlanRating !="Not enough data available" & PlanRating !="Plan too small to be measured" )%>%
mutate(PlanRating=as.numeric(PlanRating))
a_dat4=final_data%>%
filter(`Organization Type`=="Local CCP" | `Organization Type`=="Regional CCP" | `Organization Type`=="1876 Cost")%>%
filter(GetCare != "Plan too new to be measured" & GetCare !="Not enough data available" & GetCare !="Plan too small to be measured" )%>%
mutate(GetCare=as.numeric(GetCare))
#ANOVA
a_leave = aov(Leave ~ `Organization Type`, data = a_dat1)
summary(a_leave)
a_quality = aov(Quality ~ `Organization Type`, data = a_dat2)
summary(a_quality)
a_pr = aov(PlanRating ~ `Organization Type`, data = a_dat3)
summary(a_pr)
a_gc = aov(GetCare ~ `Organization Type`, data = a_dat4)
summary(a_gc)
library(ggplot2)
a_dat1 %>%
ggplot(aes(x=`Organization Type`,y=Leave, fill=`Organization Type`)) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2) +
ylab("Percent Leaving anually")
a_dat2 %>%
ggplot(aes(x=`Organization Type`,y=Quality, fill=`Organization Type`)) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2) +
ylab("Rating of Health Care Quality")
a_dat3 %>%
ggplot(aes(x=`Organization Type`,y=PlanRating, fill=`Organization Type`)) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2)+
ylab("Rating of Health Plan")
a_dat4 %>%
ggplot(aes(x=`Organization Type`,y=GetCare, fill=`Organization Type`)) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2) +
ylab("Beneficiaries Getting Needed Care")
#Lets look at some plots with diabetes metrics vs. population.
library(lubridate)
D1_data= final_data %>%
filter(DEye != "Plan too new to be measured" & DEye !="Not enough data available" & DEye !="Plan too small to be measured" & DEye !="No data available" )%>%
mutate(DEye=as.numeric(substr(DEye,1,nchar(DEye)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D3_data= final_data %>%
filter(DSugar != "Plan too new to be measured" & DSugar !="Not enough data available" & DSugar !="Plan too small to be measured"  & DSugar !="No data available" & DSugar !="CMS identified issues with this plan's data")%>%
mutate(DSugar=as.numeric(substr(DSugar,1,nchar(DSugar)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D4_data= final_data %>%
filter(DMed != "Plan too new to be measured" & DMed !="Not enough data available" & DMed !="Plan too small to be measured"  & DMed !="No data available" & DMed != "Plan not required to report measure")%>%
mutate(DMed=as.numeric(substr(DMed,1,nchar(DMed)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
#Simple linear regression regressing on the log of population and the age of the contract.
lm1=lm(DEye~logenr + yrs_old,data=D1_data)
lm3=lm(DSugar~logenr+ yrs_old,data=D3_data)
lm4=lm(DMed~logenr+ yrs_old,data=D4_data)
summary(lm1)
summary(lm3)
summary(lm4)
coefficients(lm1)
coefficients(lm3)
coefficients(lm4)
#plots
D1_data %>%  ggplot(aes(logenr,DEye)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm1)[1], slope = coefficients(lm1)[2], col = "blue")+
ylab("Diabetes Care - Eye Exam") +
xlab("Log of Enrollment")
D3_data %>%  ggplot(aes(logenr,DSugar)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm3)[1], slope = coefficients(lm3)[2], col = "red")+
ylab("Diabetes Care - Blood Sugar Maintinence") +
xlab("Log of Enrollment")
D4_data %>%  ggplot(aes(logenr,DMed)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm4)[1], slope = coefficients(lm4)[2], col = "purple")+
ylab("Medication adherence for Diabetes Drugs") +
xlab("Log of Enrollment")
#Lets look at some plots with  Measures for people in good health vs. population.
library(lubridate)
D1_data= final_data %>%
filter(BCS != "Plan too new to be measured" & BCS !="Not enough data available" & BCS !="Plan too small to be measured" & BCS !="No data available" )%>%
mutate(BCS=as.numeric(substr(BCS,1,nchar(BCS)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D2_data= final_data %>%
filter(CCS != "Plan too new to be measured" & CCS !="Not enough data available" & CCS !="Plan too small to be measured"  & CCS !="No data available" )%>%
mutate(CCS=as.numeric(substr(CCS,1,nchar(CCS)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D3_data= final_data %>%
filter(BMI != "Plan too new to be measured" & BMI !="Not enough data available" & BMI !="Plan too small to be measured"  & BMI !="No data available" & BMI != "Plan not required to report measure")%>%
mutate(BMI=as.numeric(substr(BMI,1,nchar(BMI)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
#Simple linear regression regressing on the log of population and the age of the contract.
lm1=lm(BCS~logenr + yrs_old,data=D1_data)
lm2=lm(CCS~logenr+ yrs_old,data=D2_data)
lm3=lm(BMI~logenr+ yrs_old,data=D3_data)
summary(lm1)
summary(lm2)
summary(lm3)
coef(lm1)
coef(lm2)
coef(lm3)
#Plots
D1_data %>%  ggplot(aes(logenr,BCS)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm1)[1], slope = coefficients(lm1)[2], col = "blue")+
ylab("Breast Cancer Screening") +
xlab("Log of Enrollment")
D2_data %>%  ggplot(aes(logenr,CCS)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm2)[1], slope = coefficients(lm2)[2], col = "red")+
ylab("Colorectal Cancer Screening") +
xlab("Log of Enrollment")
D3_data %>%  ggplot(aes(logenr,BMI)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm3)[1], slope = coefficients(lm3)[2], col = "purple")+
ylab("BMI Assessments") +
xlab("Log of Enrollment")
Priv_data1= final_data %>%
filter(`Parent Organization`=='UnitedHealth Group, Inc.'
| `Parent Organization`=='Humana Inc.'
| `Parent Organization`=='CVS Health Corporation')%>%
filter(Leave != "Plan too new to be measured" & Leave !="Not enough data available" & Leave !="Plan too small to be measured" )%>%
mutate(Leave=as.numeric(substr(Leave,1,nchar(Leave)-1)))%>%
mutate(uhg=ifelse(`Parent Organization`=='UnitedHealth Group, Inc.',1,0))%>%
mutate(hum=ifelse(`Parent Organization`=='Humana Inc.',1,0))%>%
mutate(cvs=ifelse(`Parent Organization`=='CVS Health Corporation',1,0))
Priv_data2= final_data %>%
filter(`Parent Organization`=='UnitedHealth Group, Inc.'
| `Parent Organization`=='Humana Inc.'
| `Parent Organization`=='CVS Health Corporation')%>%
filter(Quality != "Plan too new to be measured" & Quality !="Not enough data available" & Quality !="Plan too small to be measured" )%>%
mutate(Quality=as.numeric(Quality))%>%
mutate(uhg=ifelse(`Parent Organization`=='UnitedHealth Group, Inc.',1,0))%>%
mutate(hum=ifelse(`Parent Organization`=='Humana Inc.',1,0))%>%
mutate(cvs=ifelse(`Parent Organization`=='CVS Health Corporation',1,0))
Priv_data3= final_data %>%
filter(`Parent Organization`=='UnitedHealth Group, Inc.'
| `Parent Organization`=='Humana Inc.'
| `Parent Organization`=='CVS Health Corporation')%>%
filter(PlanRating != "Plan too new to be measured" & PlanRating !="Not enough data available" & PlanRating !="Plan too small to be measured" )%>%
mutate(PlanRating=as.numeric(PlanRating))%>%
mutate(uhg=ifelse(`Parent Organization`=='UnitedHealth Group, Inc.',1,0))%>%
mutate(hum=ifelse(`Parent Organization`=='Humana Inc.',1,0))%>%
mutate(cvs=ifelse(`Parent Organization`=='CVS Health Corporation',1,0))
Priv_data4= final_data %>%
filter(`Parent Organization`=='UnitedHealth Group, Inc.'
| `Parent Organization`=='Humana Inc.'
| `Parent Organization`=='CVS Health Corporation')%>%
filter(GetCare != "Plan too new to be measured" & GetCare !="Not enough data available" & GetCare !="Plan too small to be measured" )%>%
mutate(GetCare=as.numeric(GetCare))%>%
mutate(uhg=ifelse(`Parent Organization`=='UnitedHealth Group, Inc.',1,0))%>%
mutate(hum=ifelse(`Parent Organization`=='Humana Inc.',1,0))%>%
mutate(cvs=ifelse(`Parent Organization`=='CVS Health Corporation',1,0))
#Linear regression, letting UHG be the "base" category, but adding Humana/CVS as comparison categories
lm1=lm(Leave~hum+cvs,data=Priv_data1)
lm2=lm(Quality~hum+cvs,data=Priv_data2)
lm3=lm(PlanRating~hum+cvs,data=Priv_data3)
lm4=lm(GetCare~hum+cvs,data=Priv_data4)
summary(lm1)
summary(lm2)
summary(lm3)
summary(lm4)
confint(lm1)
confint(lm2)
confint(lm3)
confint(lm4)
#Lets look at some plots with diabetes metrics vs. population.
library(lubridate)
D1_data= final_data %>%
filter(DEye != "Plan too new to be measured" & DEye !="Not enough data available" & DEye !="Plan too small to be measured" & DEye !="No data available" )%>%
mutate(DEye=as.numeric(substr(DEye,1,nchar(DEye)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D3_data= final_data %>%
filter(DSugar != "Plan too new to be measured" & DSugar !="Not enough data available" & DSugar !="Plan too small to be measured"  & DSugar !="No data available" & DSugar !="CMS identified issues with this plan's data")%>%
mutate(DSugar=as.numeric(substr(DSugar,1,nchar(DSugar)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D4_data= final_data %>%
filter(DMed != "Plan too new to be measured" & DMed !="Not enough data available" & DMed !="Plan too small to be measured"  & DMed !="No data available" & DMed != "Plan not required to report measure")%>%
mutate(DMed=as.numeric(substr(DMed,1,nchar(DMed)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
#Simple linear regression regressing on the log of population and the age of the contract.
lm1=lm(DEye~logenr + yrs_old,data=D1_data)
lm3=lm(DSugar~logenr+ yrs_old,data=D3_data)
lm4=lm(DMed~logenr+ yrs_old,data=D4_data)
summary(lm1)
summary(lm3)
summary(lm4)
coefficients(lm1)
coefficients(lm3)
coefficients(lm4)
summary(lm1)
summary(lm3)
summary(lm3)
summary(lm4)
summary(lm1)
summary(lm3)
summary(lm4)
#Lets look at some plots with  Measures for people in good health vs. population.
library(lubridate)
D1_data= final_data %>%
filter(BCS != "Plan too new to be measured" & BCS !="Not enough data available" & BCS !="Plan too small to be measured" & BCS !="No data available" )%>%
mutate(BCS=as.numeric(substr(BCS,1,nchar(BCS)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D2_data= final_data %>%
filter(CCS != "Plan too new to be measured" & CCS !="Not enough data available" & CCS !="Plan too small to be measured"  & CCS !="No data available" )%>%
mutate(CCS=as.numeric(substr(CCS,1,nchar(CCS)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D3_data= final_data %>%
filter(BMI != "Plan too new to be measured" & BMI !="Not enough data available" & BMI !="Plan too small to be measured"  & BMI !="No data available" & BMI != "Plan not required to report measure")%>%
mutate(BMI=as.numeric(substr(BMI,1,nchar(BMI)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
#Simple linear regression regressing on the log of population and the age of the contract.
lm1=lm(BCS~logenr + yrs_old,data=D1_data)
lm2=lm(CCS~logenr+ yrs_old,data=D2_data)
lm3=lm(BMI~logenr+ yrs_old,data=D3_data)
summary(lm1)
summary(lm2)
summary(lm3)
coef(lm1)
coef(lm2)
coef(lm3)
summary(lm1)
summary(lm2)
summary(lm3)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#Read in Enrollment data
data_main<- read_csv("C:\\Users\\Daniel\\Desktop\\MPC data\\CPSC_Enrollment_2019_09\\CPSC_Enrollment_Info_2019_09.csv")
data_main$enr= ifelse(data_main$Enrollment=='*',0,as.numeric(data_main$Enrollment))
#Read in contract Information
contract_info = read_csv("C:\\Users\\Daniel\\Desktop\\MPC data\\CPSC_Enrollment_2019_09\\CPSC_Contract_Info_2019_09.csv")
#Read in Star Ratings data
SR = read_csv("C:\\Users\\Daniel\\Desktop\\MPC data\\2018_Report_Card_Master_Table_2018_03_28_data_DW.csv")
#Get enrollment by contract number
enrollment_data=data_main %>%
group_by(`Contract Number`) %>%
summarize(tot_enr=sum(enr)) %>%
mutate(contract=`Contract Number`)
#Get Unique contract information.
cntrct=contract_info %>%
select(`Contract ID`,`Organization Type`, `Parent Organization`,`Contract Effective Date`)%>%
distinct() %>%
mutate(contract=`Contract ID`)
#Inner join data
#EXCLUDE PLANS THAT ARE JUST PD, and where enrollment is 0
main_enr_data=inner_join(enrollment_data,cntrct, by='contract')%>%
filter(`Organization Type` !='Medicare Prescription Drug Plan') %>%
filter(tot_enr>0)
#inner join SR data
SR2=SR%>%
mutate(contract=CONTRACT_ID)%>%
select (-c(`Organization Type`, `Parent Organization`))
full_data=inner_join(main_enr_data,SR2,by='contract')
#also create sub filter where enrollment is  > 10000.
#Also remove demo plans and employer specific plans (no data)
enr_10000=full_data %>%
filter(tot_enr>10000) %>%
filter(`Organization Type` !='Demo') %>%
filter(`Organization Type` !='Employer/Union Only Direct Contract PDP')
#note this is still 95% of all enrollment so we are not missing much.
sum(enr_10000$tot_enr)/sum(full_data$tot_enr)
final_data=enr_10000 %>%
rename(
BCS=`C01: Breast Cancer Screening`
,CCS=`C02: Colorectal Cancer Screening`
,Flu=`C03: Annual Flu Vaccine`
,Phys=`C04: Improving or Maintaining Physical Health`
,MH=`C05: Improving or Maintaining Mental Health`
,Activity=`C06: Monitoring Physical Activity`
,BMI=`C07: Adult BMI Assessment`
,Leave=`C29: Members Choosing to Leave the Plan`
,Quality=`C25: Rating of Health Care Quality`
,PlanRating=`C26: Rating of Health Plan`
,GetCare=`C22: Getting Needed Care`
,DEye=`C13: Diabetes Care - Eye Exam`
,DKid=`C14: Diabetes Care - Kidney Disease Monitoring`
,DSugar=`C15: Diabetes Care - Blood Sugar Controlled`
,DMed=`D11: Medication Adherence for Diabetes Medications`
)%>%
select(contract, tot_enr, `Organization Type`,`Parent Organization`,`Contract Effective Date`
,BCS
,CCS
,Flu
,Phys
,MH
,Activity
,BMI
,Leave
,Quality
,PlanRating
,GetCare
,DEye
,DKid
,DSugar
,DMed)
a_dat1=final_data%>%
filter(`Organization Type`=="Local CCP" | `Organization Type`=="Regional CCP" | `Organization Type`=="1876 Cost")%>%
filter(Leave != "Plan too new to be measured" & Leave !="Not enough data available" & Leave !="Plan too small to be measured" )%>%
mutate(Leave=as.numeric(substr(Leave,1,nchar(Leave)-1)))
a_dat2=final_data%>%
filter(`Organization Type`=="Local CCP" | `Organization Type`=="Regional CCP" | `Organization Type`=="1876 Cost")%>%
filter(Quality != "Plan too new to be measured" & Quality !="Not enough data available" & Quality !="Plan too small to be measured" )%>%
mutate(Quality=as.numeric(Quality))
a_dat3=final_data%>%
filter(`Organization Type`=="Local CCP" | `Organization Type`=="Regional CCP" | `Organization Type`=="1876 Cost")%>%
filter(PlanRating != "Plan too new to be measured" & PlanRating !="Not enough data available" & PlanRating !="Plan too small to be measured" )%>%
mutate(PlanRating=as.numeric(PlanRating))
a_dat4=final_data%>%
filter(`Organization Type`=="Local CCP" | `Organization Type`=="Regional CCP" | `Organization Type`=="1876 Cost")%>%
filter(GetCare != "Plan too new to be measured" & GetCare !="Not enough data available" & GetCare !="Plan too small to be measured" )%>%
mutate(GetCare=as.numeric(GetCare))
#ANOVA
a_leave = aov(Leave ~ `Organization Type`, data = a_dat1)
summary(a_leave)
a_quality = aov(Quality ~ `Organization Type`, data = a_dat2)
summary(a_quality)
a_pr = aov(PlanRating ~ `Organization Type`, data = a_dat3)
summary(a_pr)
a_gc = aov(GetCare ~ `Organization Type`, data = a_dat4)
summary(a_gc)
library(ggplot2)
a_dat1 %>%
ggplot(aes(x=`Organization Type`,y=Leave, fill=`Organization Type`)) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2) +
ylab("Percent Leaving anually")
a_dat2 %>%
ggplot(aes(x=`Organization Type`,y=Quality, fill=`Organization Type`)) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2) +
ylab("Rating of Health Care Quality")
a_dat3 %>%
ggplot(aes(x=`Organization Type`,y=PlanRating, fill=`Organization Type`)) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2)+
ylab("Rating of Health Plan")
a_dat4 %>%
ggplot(aes(x=`Organization Type`,y=GetCare, fill=`Organization Type`)) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2) +
ylab("Beneficiaries Getting Needed Care")
#Lets look at some plots with diabetes metrics vs. population.
library(lubridate)
D1_data= final_data %>%
filter(DEye != "Plan too new to be measured" & DEye !="Not enough data available" & DEye !="Plan too small to be measured" & DEye !="No data available" )%>%
mutate(DEye=as.numeric(substr(DEye,1,nchar(DEye)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D3_data= final_data %>%
filter(DSugar != "Plan too new to be measured" & DSugar !="Not enough data available" & DSugar !="Plan too small to be measured"  & DSugar !="No data available" & DSugar !="CMS identified issues with this plan's data")%>%
mutate(DSugar=as.numeric(substr(DSugar,1,nchar(DSugar)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D4_data= final_data %>%
filter(DMed != "Plan too new to be measured" & DMed !="Not enough data available" & DMed !="Plan too small to be measured"  & DMed !="No data available" & DMed != "Plan not required to report measure")%>%
mutate(DMed=as.numeric(substr(DMed,1,nchar(DMed)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
#Simple linear regression regressing on the log of population and the age of the contract.
lm1=lm(DEye~logenr + yrs_old,data=D1_data)
lm3=lm(DSugar~logenr+ yrs_old,data=D3_data)
lm4=lm(DMed~logenr+ yrs_old,data=D4_data)
summary(lm1)
summary(lm3)
summary(lm4)
coefficients(lm1)
coefficients(lm3)
coefficients(lm4)
#plots
D1_data %>%  ggplot(aes(logenr,DEye)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm1)[1], slope = coefficients(lm1)[2], col = "blue")+
ylab("Diabetes Care - Eye Exam") +
xlab("Log of Enrollment")
D3_data %>%  ggplot(aes(logenr,DSugar)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm3)[1], slope = coefficients(lm3)[2], col = "red")+
ylab("Diabetes Care - Blood Sugar Maintinence") +
xlab("Log of Enrollment")
D4_data %>%  ggplot(aes(logenr,DMed)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm4)[1], slope = coefficients(lm4)[2], col = "purple")+
ylab("Medication adherence for Diabetes Drugs") +
xlab("Log of Enrollment")
#Lets look at some plots with  Measures for people in good health vs. population.
library(lubridate)
D1_data= final_data %>%
filter(BCS != "Plan too new to be measured" & BCS !="Not enough data available" & BCS !="Plan too small to be measured" & BCS !="No data available" )%>%
mutate(BCS=as.numeric(substr(BCS,1,nchar(BCS)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D2_data= final_data %>%
filter(CCS != "Plan too new to be measured" & CCS !="Not enough data available" & CCS !="Plan too small to be measured"  & CCS !="No data available" )%>%
mutate(CCS=as.numeric(substr(CCS,1,nchar(CCS)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
D3_data= final_data %>%
filter(BMI != "Plan too new to be measured" & BMI !="Not enough data available" & BMI !="Plan too small to be measured"  & BMI !="No data available" & BMI != "Plan not required to report measure")%>%
mutate(BMI=as.numeric(substr(BMI,1,nchar(BMI)-1)))%>%
mutate(logenr=log(tot_enr,base=10))%>%
mutate(yrs_old=2019-year(mdy(`Contract Effective Date`)))
#Simple linear regression regressing on the log of population and the age of the contract.
lm1=lm(BCS~logenr + yrs_old,data=D1_data)
lm2=lm(CCS~logenr+ yrs_old,data=D2_data)
lm3=lm(BMI~logenr+ yrs_old,data=D3_data)
summary(lm1)
summary(lm2)
summary(lm3)
coef(lm1)
coef(lm2)
coef(lm3)
#Plots
D1_data %>%  ggplot(aes(logenr,BCS)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm1)[1], slope = coefficients(lm1)[2], col = "blue")+
ylab("Breast Cancer Screening") +
xlab("Log of Enrollment")
D2_data %>%  ggplot(aes(logenr,CCS)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm2)[1], slope = coefficients(lm2)[2], col = "red")+
ylab("Colorectal Cancer Screening") +
xlab("Log of Enrollment")
D3_data %>%  ggplot(aes(logenr,BMI)) +
geom_point(alpha = 0.5) +
geom_abline(intercept = coefficients(lm3)[1], slope = coefficients(lm3)[2], col = "purple")+
ylab("BMI Assessments") +
xlab("Log of Enrollment")
Priv_data1= final_data %>%
filter(`Parent Organization`=='UnitedHealth Group, Inc.'
| `Parent Organization`=='Humana Inc.'
| `Parent Organization`=='CVS Health Corporation')%>%
filter(Leave != "Plan too new to be measured" & Leave !="Not enough data available" & Leave !="Plan too small to be measured" )%>%
mutate(Leave=as.numeric(substr(Leave,1,nchar(Leave)-1)))%>%
mutate(uhg=ifelse(`Parent Organization`=='UnitedHealth Group, Inc.',1,0))%>%
mutate(hum=ifelse(`Parent Organization`=='Humana Inc.',1,0))%>%
mutate(cvs=ifelse(`Parent Organization`=='CVS Health Corporation',1,0))
Priv_data2= final_data %>%
filter(`Parent Organization`=='UnitedHealth Group, Inc.'
| `Parent Organization`=='Humana Inc.'
| `Parent Organization`=='CVS Health Corporation')%>%
filter(Quality != "Plan too new to be measured" & Quality !="Not enough data available" & Quality !="Plan too small to be measured" )%>%
mutate(Quality=as.numeric(Quality))%>%
mutate(uhg=ifelse(`Parent Organization`=='UnitedHealth Group, Inc.',1,0))%>%
mutate(hum=ifelse(`Parent Organization`=='Humana Inc.',1,0))%>%
mutate(cvs=ifelse(`Parent Organization`=='CVS Health Corporation',1,0))
Priv_data3= final_data %>%
filter(`Parent Organization`=='UnitedHealth Group, Inc.'
| `Parent Organization`=='Humana Inc.'
| `Parent Organization`=='CVS Health Corporation')%>%
filter(PlanRating != "Plan too new to be measured" & PlanRating !="Not enough data available" & PlanRating !="Plan too small to be measured" )%>%
mutate(PlanRating=as.numeric(PlanRating))%>%
mutate(uhg=ifelse(`Parent Organization`=='UnitedHealth Group, Inc.',1,0))%>%
mutate(hum=ifelse(`Parent Organization`=='Humana Inc.',1,0))%>%
mutate(cvs=ifelse(`Parent Organization`=='CVS Health Corporation',1,0))
Priv_data4= final_data %>%
filter(`Parent Organization`=='UnitedHealth Group, Inc.'
| `Parent Organization`=='Humana Inc.'
| `Parent Organization`=='CVS Health Corporation')%>%
filter(GetCare != "Plan too new to be measured" & GetCare !="Not enough data available" & GetCare !="Plan too small to be measured" )%>%
mutate(GetCare=as.numeric(GetCare))%>%
mutate(uhg=ifelse(`Parent Organization`=='UnitedHealth Group, Inc.',1,0))%>%
mutate(hum=ifelse(`Parent Organization`=='Humana Inc.',1,0))%>%
mutate(cvs=ifelse(`Parent Organization`=='CVS Health Corporation',1,0))
#Linear regression, letting UHG be the "base" category, but adding Humana/CVS as comparison categories
lm1=lm(Leave~hum+cvs,data=Priv_data1)
lm2=lm(Quality~hum+cvs,data=Priv_data2)
lm3=lm(PlanRating~hum+cvs,data=Priv_data3)
lm4=lm(GetCare~hum+cvs,data=Priv_data4)
summary(lm1)
summary(lm2)
summary(lm3)
summary(lm4)
confint(lm1)
confint(lm2)
confint(lm3)
confint(lm4)
